@ECHO OFF
REM Copyright 2015 DataStax
REM
REM Licensed under the Apache License, Version 2.0 (the "License");
REM you may not use this file except in compliance with the License.
REM You may obtain a copy of the License at
REM
REM http://www.apache.org/licenses/LICENSE-2.0
REM
REM Unless required by applicable law or agreed to in writing, software
REM distributed under the License is distributed on an "AS IS" BASIS,
REM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
REM See the License for the specific language governing permissions and
REM limitations under the License.

REM Enable delayed expansion (multiple var assignments) and local variables
SETLOCAL ENABLEDELAYEDEXPANSION

SET BATCH_DIRECTORY=%~D0%~P0
SET ABSOLUTE_BATCH_DIRECTORY=%~DP0
SET BATCH_FILENAME=%~N0%~X0

REM Exit code constants
SET EXIT_CODE_INVALID_SYSTEM_ARCHITECTURE=1
SET EXIT_CODE_MISSING_VISUAL_STUDIO=2
SET EXIT_CODE_MISSING_BUILD_DEPENDENCY=3
SET EXIT_CODE_INVALID_BUILD_DEPENDENCY_VERSION=4
SET EXIT_CODE_CLONE_FAILED=5
SET EXIT_CODE_CHECKOUT_FAILED=6
SET EXIT_CODE_BUILD_DEPENDENCY_FAILED=7
SET EXIT_CODE_BUILD_DRIVER_FAILED=8

REM Argument constants
SET ARGUMENT_BUILD_TYPE_DEBUG=--DEBUG
SET ARGUMENT_BUILD_TYPE_RELEASE=--RELEASE
SET ARGUMENT_DISABLE_CLEAN_BUILD=--DISABLE-CLEAN
SET ARGUMENT_DISABLE_OPENSSL=--DISABLE-OPENSSL
SET ARGUMENT_LIBRARY_TYPE_SHARED=--SHARED
SET ARGUMENT_LIBRARY_TYPE_STATIC=--STATIC
SET ARGUMENT_TARGET_ARCHITECTURE_32BIT=--X86
SET ARGUMENT_TARGET_ARCHITECTURE_64BIT=--X64
SET ARGUMENT_HELP=--HELP

REM Option/Value constants
SET ARCHITECTURE_32BIT=32
SET ARCHITECTURE_64BIT=64
SET BUILD_TYPE_DEBUG=DEBUG
SET BUILD_TYPE_RELEASE=RELEASE
SET LIBRARY_TYPE_SHARED=SHARED
SET LIBRARY_TYPE_STATIC=STATIC
SET TRUE=1
SET FALSE=0
SET YES=1
SET NO=2

REM Determine the system architecture (32/64 bit)
SET ARCHITECTURE_REGISTRY_LOCATION_QUERY=HKLM\HARDWARE\DESCRIPTION\System\CentralProcessor\0
REG QUERY %ARCHITECTURE_REGISTRY_LOCATION_QUERY% | FIND /I "x86" > NUL && SET SYSTEM_ARCHITECTURE=%ARCHITECTURE_32BIT% || SET SYSTEM_ARCHITECTURE=%ARCHITECTURE_64BIT%

REM Dependency executable constants
SET CMAKE=cmake.exe
SET "DOWNLOAD_URL_CMAKE=http://www.cmake.org/download"
SET GIT=git.exe
SET "DOWNLOAD_URL_GIT=http://git-scm.com/downloads"
SET PERL=perl.exe
SET "DOWNLOAD_URL_PERL=https://www.perl.org/get.html#win32"
SET PYTHON=python.exe
SET "DOWNLOAD_URL_PYTHON=https://www.python.org/downloads/"
SET DEVENV=devenv.exe
SET MSBUILD=msbuild.exe
SET NMAKE=nmake.exe
SET "DOWNLOAD_URL_VISUAL_STUDIO=http://go.microsoft.com/?linkid=9832256"

REM Minimum version build dependency constants
SET MINIMUM_VERSION_REQUIRED_CMAKE=2.8.0
SET MINIMUM_VERSION_REQUIRED_PYTHON=2.7.0

REM Build constants
SET BUILD_DIRECTORY=build
SET "ABSOLUTE_BUILD_DIRECTORY=%BATCH_DIRECTORY%\%BUILD_DIRECTORY%"
SET DRIVER_DRIVER_DIRECTORY=driver

REM Build dependency constants
SET DEPENDENCIES_DIRECTORY=dependencies
SET "ABSOLUTE_DEPENDENCIES_DIRECTORY=%ABSOLUTE_BUILD_DIRECTORY%\%DEPENDENCIES_DIRECTORY%"
SET DEPENDENCIES_SOURCE_DIRECTORY=src
SET DEPENDENCIES_LIBRARIES_DIRECTORY=libs
SET LIBUV_REPOSITORY_URL=https://github.com/libuv/libuv.git
SET LIBUV_DIRECTORY=libuv
SET LIBUV_BRANCH_TAG_VERSION=v1.2.1
SET GYP_REPOSITORY_URL=https://chromium.googlesource.com/external/gyp.git
SET OPENSSL_REPOSITORY_URL=https://github.com/openssl/openssl.git
SET OPENSSL_DIRECTORY=openssl
SET OPENSSL_BRANCH_TAG_VERSION=OpenSSL_1_0_1l

REM Library directory constants
SET LIBRARY_INCLUDE_DIRECTORY=include
SET LIBRARY_BINARY_DIRECTORY=lib
SET LIBRARY_RUNTIME_DIRECTORY=bin
SET "ABSOLUTE_DRIVER_LIBRARY_DIRECTORY=%ABSOLUTE_BUILD_DIRECTORY%\%LIBRARY_BINARY_DIRECTORY%"
SET "ABSOLUTE_DEPENDENCIES_LIBRARIES_DIRECTORY=%ABSOLUTE_DEPENDENCIES_DIRECTORY%\%DEPENDENCIES_LIBRARIES_DIRECTORY%"
SET "ABSOLUTE_LIBUV_LIBRARY_DIRECTORY=%ABSOLUTE_DEPENDENCIES_LIBRARIES_DIRECTORY%\%LIBUV_DIRECTORY%"
SET "ABSOLUTE_OPENSSL_LIBRARY_DIRECTORY=%ABSOLUTE_DEPENDENCIES_LIBRARIES_DIRECTORY%\%OPENSSL_DIRECTORY%"

REM Log filename constants
SET LOG_DIRECTORY=log
SET "ABSOLUTE_LOG_DIRECTORY=%ABSOLUTE_BUILD_DIRECTORY%\%LOG_DIRECTORY%"
SET "LOG_DRIVER_BUILD=%ABSOLUTE_LOG_DIRECTORY%\driver.log"
SET "LOG_LIBUV_BUILD=%ABSOLUTE_LOG_DIRECTORY%\libuv.log"
SET "LOG_OPENSSL_BUILD=%ABSOLUTE_LOG_DIRECTORY%\openssl.log"

REM Build defaults (can be updated via command line)
SET BUILD_TYPE=%BUILD_TYPE_RELEASE%
SET ENABLE_CLEAN_BUILD=%TRUE%
SET ENABLE_OPENSSL=%TRUE%
SET LIBRARY_TYPE=%LIBRARY_TYPE_SHARED%
SET TARGET_ARCHITECTURE=%SYSTEM_ARCHITECTURE%

REM Parse command line arguments
:ARGUMENT_LOOP
IF NOT [%1] == [] (
	REM Get the current argument
	CALL :UPPERCASE %1 ARGUMENT
	SHIFT

	REM Build type (debug/release)
	IF "!ARGUMENT!" == "!ARGUMENT_BUILD_TYPE_DEBUG!" (
		SET BUILD_TYPE=!BUILD_TYPE_DEBUG!
	)
	IF "!ARGUMENT!" == "!ARGUMENT_BUILD_TYPE_RELEASE!" (
		SET BUILD_TYPE=!BUILD_TYPE_RELEASE!
	)

	REM Library type
	IF "!ARGUMENT!" == "!ARGUMENT_LIBRARY_TYPE_SHARED!" (
		SET LIBRARY_TYPE=!LIBRARY_TYPE_SHARED!
	)
	IF "!ARGUMENT!" == "!ARGUMENT_LIBRARY_TYPE_STATIC!" (
		SET LIBRARY_TYPE=!LIBRARY_TYPE_STATIC!
	)

	REM Target architecture (32/64 bit)
	IF "!ARGUMENT!" == "!ARGUMENT_TARGET_ARCHITECTURE_32BIT!" (
		SET TARGET_ARCHITECTURE=!ARCHITECTURE_32BIT!
	)
	IF "!ARGUMENT!" == "!ARGUMENT_TARGET_ARCHITECTURE_64BIT!" (
		REM Ensure the 64-bit build would be able to proceed
		IF NOT !SYSTEM_ARCHITECTURE! EQU !ARCHITECTURE_64BIT! (
			ECHO Invalid System Architecture: Unable to build 64-bit project on 32-bit OS
			EXIT /B !EXIT_CODE_INVALID_SYSTEM_ARCHITECTURE!
		)
		SET TARGET_ARCHITECTURE=!ARCHITECTURE_64BIT!
	)

	REM Disable clean build
	IF "!ARGUMENT!" == "!ARGUMENT_DISABLE_CLEAN_BUILD!" (
		SET ENABLE_CLEAN_BUILD=!FALSE!
	)

	REM Disable OpenSSL
	IF "!ARGUMENT!" == "!ARGUMENT_DISABLE_OPENSSL!" (
		SET ENABLE_OPENSSL=!FALSE!
	)

	REM Help message
	IF "!ARGUMENT!" == "!ARGUMENT_HELP!" (
		CALL :DISPLAYHELP 0
		EXIT /B
	)

	REM Continue to loop through the command line arguments
	GOTO :ARGUMENT_LOOP
)

REM Determine Visual Studio Version(s) available
SET "VISUAL_STUDIO_INTERNAL_VERSIONS=120 110 100"
SET "VISUAL_STUDIO_INTERNAL_SHORTHAND_VERSIONS=12 11 10"
SET "VISUAL_STUDIO_VERSIONS=2013 2012 2010"
SET INDEX=0
FOR %%A IN (!VISUAL_STUDIO_INTERNAL_VERSIONS!) DO (
	SET /A INDEX+=1
	IF DEFINED VS%%ACOMNTOOLS SET "AVAILABLE_VISUAL_STUDIO_VERSIONS=!AVAILABLE_VISUAL_STUDIO_VERSIONS! !INDEX!"
)

REM Determine Windows SDK Version(s) available
SET "WINDOWS_SDK_VERSIONS=v7.1 v8.0 v8.1"
IF DEFINED WindowsSDKDir (
	IF DEFINED WindowsSDKVersionOverride (
		CALL :GETVALUE WindowsSDKVersionOverride WINDOWS_SDK_VERSION
		SET INDEX=0
		FOR %%A IN (!WINDOWS_SDK_VERSIONS!) DO (
			SET /A INDEX+=1
			CALL :GETARRAYELEMENT WINDOWS_SDK_VERSIONS !INDEX! CHECK_WINDOWS_SDK_VERSION
			IF "!WINDOWS_SDK_VERSION!" == "!CHECK_WINDOWS_SDK_VERSION!" SET WINDOWS_SDK_FOUND=!TRUE!
		)
	)
)

REM Display discovered Visual Studio version(s) and Windows SDK version
set NUMBER_OF_VERSIONS=0
FOR %%A IN (!AVAILABLE_VISUAL_STUDIO_VERSIONS!) DO (
	SET /A NUMBER_OF_VERSIONS+=1
)
IF DEFINED WINDOWS_SDK_FOUND SET /A NUMBER_OF_VERSIONS+=1

REM Determine if build can proceed
IF !NUMBER_OF_VERSIONS! EQU 0 (
	ECHO Visual Studio Not Found: Install Visual Studio 2010 - 2013 to complete build
	ECHO	!DOWNLOAD_URL_VISUAL_STUDIO!
	CHOICE /N /T 15 /D N /M "Would you like to download Visual Studio 2013 Express now?"
	IF !ERRORLEVEL! EQU !YES! START !DOWNLOAD_URL_VISUAL_STUDIO!
	EXIT /B !EXIT_CODE_MISSING_VISUAL_STUDIO!
)

REM Ensure additional build dependencies are installed
CALL :GETFULLPATH "!CMAKE!" CMAKE_FOUND
IF NOT DEFINED CMAKE_FOUND (
	ECHO CMake Not Found in PATH: CMake v!MINIMUM_VERSION_REQUIRED_CMAKE! is required to complete build
	ECHO	!DOWNLOAD_URL_CMAKE!
	CHOICE /N /T 15 /D N /M "Would you like to download CMake now?"
	IF !ERRORLEVEL! EQU !YES! START !DOWNLOAD_URL_CMAKE!
	EXIT /B !EXIT_CODE_MISSING_BUILD_DEPENDENCY!
) ELSE (
	FOR /F "TOKENS=1,2,3* DELIMS= " %%A IN ('!CMAKE! --version') DO IF NOT DEFINED CMAKE_VERSION SET CMAKE_VERSION=%%C
	CALL :COMPAREVERSION !CMAKE_VERSION! !MINIMUM_VERSION_REQUIRED_CMAKE!
	IF !ERRORLEVEL! EQU -1 (
		ECHO Invalid CMake Version Found: CMake v!MINIMUM_VERSION_REQUIRED_CMAKE! is required to complete build
		ECHO	!DOWNLOAD_URL_CMAKE!
		CHOICE /N /T 15 /D N /M "Would you like to download CMake now?"
		IF !ERRORLEVEL! EQU !YES! START !DOWNLOAD_URL_CMAKE!
		EXIT /B !EXIT_CODE_INVALID_BUILD_DEPENDENCY_VERSION!
	)
)
CALL :GETFULLPATH "!GIT!" GIT_FOUND
IF NOT DEFINED GIT_FOUND (
	ECHO Git Not Found in PATH: Git is required to complete build
	ECHO	!DOWNLOAD_URL_GIT!
	CHOICE /N /T 15 /D N /M "Would you like to download Git now?"
	IF !ERRORLEVEL! EQU !YES! START !DOWNLOAD_URL_GIT!
	EXIT /B !EXIT_CODE_MISSING_BUILD_DEPENDENCY!
)
CALL :GETFULLPATH "!PERL!" PERL_FOUND
IF NOT DEFINED PERL_FOUND (
	REM Perl is only required for building/configuring OpenSSL
	IF !ENABLE_OPENSSL! EQU !TRUE! (
		ECHO Perl Not Found in PATH: Perl is required to complete build
		ECHO	!DOWNLOAD_URL_PERL!
		CHOICE /N /T 15 /D N /M "Would you like to download Perl now?"
		IF !ERRORLEVEL! EQU !YES! START !DOWNLOAD_URL_PERL!
		EXIT /B !EXIT_CODE_MISSING_BUILD_DEPENDENCY!
	)
)
CALL :GETFULLPATH "!PYTHON!" PYTHON_FOUND
IF NOT DEFINED PYTHON_FOUND (
	ECHO Python Not Found in PATH: Python v!MINIMUM_VERSION_REQUIRED_PYTHON! is required to complete build
	ECHO	!DOWNLOAD_URL_PYTHON!
	CHOICE /N /T 15 /D N /M "Would you like to download Python now?"
	IF !ERRORLEVEL! EQU !YES! START !DOWNLOAD_URL_PYTHON!
	EXIT /B !EXIT_CODE_MISSING_BUILD_DEPENDENCY!
) ELSE (
	FOR /F "TOKENS=1,2* DELIMS= " %%A IN ('!PYTHON! --version 2^>^&1') DO IF NOT DEFINED PYTHON_VERSION SET PYTHON_VERSION=%%B
	CALL :COMPAREVERSION !PYTHON_VERSION! !MINIMUM_VERSION_REQUIRED_PYTHON!
	IF !ERRORLEVEL! EQU -1 (
		ECHO Invalid Python Version Found: Python v!MINIMUM_VERSION_REQUIRED_PYTHON! is required to complete build
		ECHO	!DOWNLOAD_URL_PYTHON!
		CHOICE /N /T 15 /D N /M "Would you like to download Python now?"
		IF !ERRORLEVEL! EQU !YES! START !DOWNLOAD_URL_PYTHON!
		EXIT /B !EXIT_CODE_INVALID_BUILD_DEPENDENCY_VERSION!
	)
	REM Python v3.x does not work properly with GYP (libuv build dependency)
	CALL :COMPAREVERSION !PYTHON_VERSION! 3.0.0
	IF !ERRORLEVEL! GEQ 0 (
		ECHO Invalid Python Version Found: Python v3.x is not supported
		ECHO	!DOWNLOAD_URL_PYTHON!
		CHOICE /N /T 15 /D N /M "Would you like to download Python now?"
		IF !ERRORLEVEL! EQU !YES! START !DOWNLOAD_URL_PYTHON!
		EXIT /B !EXIT_CODE_INVALID_BUILD_DEPENDENCY_VERSION!
	)
)

REM Determine if we should allow the user to choose Visual Studio version
IF !NUMBER_OF_VERSIONS! GTR 1 (
	REM Display disocvered Visual Studio versions for selection
	SET INDEX=0
	SET SELECTION_OPTIONS=
	FOR %%A IN (!AVAILABLE_VISUAL_STUDIO_VERSIONS!) DO (
		SET /A INDEX+=1
		SET "SELECTION_OPTIONS=!SELECTION_OPTIONS!!INDEX!"
		CALL :GETARRAYELEMENT VISUAL_STUDIO_VERSIONS %%A VISUAL_STUDIO_VERSION
		ECHO !INDEX!^) Visual Studio !VISUAL_STUDIO_VERSION!
	)

	REM Display discovered Windows SDK version for selection
	IF DEFINED WINDOWS_SDK_FOUND (
		SET /A INDEX+=1
		SET "SELECTION_OPTIONS=!SELECTION_OPTIONS!!INDEX!"
		SET WINDOWS_SDK_SELECTION_OPTION=!INDEX!
		ECHO !INDEX!^) Windows SDK !WINDOWS_SDK_VERSION!
	)

	REM Add the exit option
	ECHO E^) Exit
	SET "SELECTION_OPTIONS=!SELECTION_OPTIONS!E"

	REM Present selection to the user
	CHOICE /C !SELECTION_OPTIONS! /N /T 60 /D E /M "Please Select a Compiler:"
	IF !ERRORLEVEL! GTR !NUMBER_OF_VERSIONS! (
		EXIT /B
	)
	ECHO.

	REM Determine the selection
	IF !ERRORLEVEL! NEQ !WINDOWS_SDK_SELECTION_OPTION! (
		CALL :GETARRAYELEMENT AVAILABLE_VISUAL_STUDIO_VERSIONS !ERRORLEVEL! USER_SELECTION
		CALL :GETARRAYELEMENT VISUAL_STUDIO_INTERNAL_VERSIONS !USER_SELECTION! VISUAL_STUDIO_INTERNAL_VERSION
		CALL :GETARRAYELEMENT VISUAL_STUDIO_INTERNAL_SHORTHAND_VERSIONS !USER_SELECTION! VISUAL_STUDIO_INTERNAL_SHORTHAND_VERSION
		CALL :GETARRAYELEMENT VISUAL_STUDIO_VERSIONS !USER_SELECTION! VISUAL_STUDIO_VERSION

		REM Ensure the other versions of VSXXXCOMNTOOLS are undefined (unset)
		FOR %%A IN (!VISUAL_STUDIO_INTERNAL_VERSIONS!) DO (
			IF NOT %%A EQU !VISUAL_STUDIO_INTERNAL_VERSION! SET VS%%ACOMNTOOLS=
		)
		
		REM Ensure the Windows SDK version is undefined (unset)
		IF DEFINED WindowsSDKDir SET WindowsSDKDir=
	) ELSE (
		SET WINDOWS_SDK_SELECTED=!TRUE!
	)
) ELSE (
	IF NOT DEFINED WINDOWS_SDK_FOUND (
		CALL :GETARRAYELEMENT VISUAL_STUDIO_INTERNAL_VERSIONS !AVAILABLE_VISUAL_STUDIO_VERSIONS! VISUAL_STUDIO_INTERNAL_VERSION
		CALL :GETARRAYELEMENT VISUAL_STUDIO_INTERNAL_SHORTHAND_VERSIONS !AVAILABLE_VISUAL_STUDIO_VERSIONS! VISUAL_STUDIO_INTERNAL_SHORTHAND_VERSION
		CALL :GETARRAYELEMENT VISUAL_STUDIO_VERSIONS !AVAILABLE_VISUAL_STUDIO_VERSIONS! VISUAL_STUDIO_VERSION
	) ELSE (
		SET WINDOWS_SDK_SELECTED=!TRUE!
	)
)

REM Display summary of build options
ECHO Build Type:          !BUILD_TYPE!
ECHO Clean Build:         !ENABLE_CLEAN_BUILD!
ECHO Library Type:        !LIBRARY_TYPE!
ECHO OpenSSL Enabled:     !ENABLE_OPENSSL!
ECHO Target Architecture: !TARGET_ARCHITECTURE!
IF NOT DEFINED WINDOWS_SDK_SELECTED (
	ECHO Visual Studio:       !VISUAL_STUDIO_VERSION!
) ELSE (
	ECHO Windows SDK:         !WINDOWS_SDK_VERSION!
)
ECHO.

REM Ensure the environment is setup correctly; if Windows SDK build environment
IF DEFINED WINDOWS_SDK_FOUND (
	REM Ensure Windows SDK environment is configured correctly
	IF "!BUILD_TYPE!" == "!BUILD_TYPE_DEBUG!" CALL SetEnv /Debug > NUL 2>&1
	IF "!BUILD_TYPE!" == "!BUILD_TYPE_RELEASE!" CALL SetEnv /Release > NUL 2>&1
	IF "!TARGET_ARCHITECTURE!" == "!ARCHITECTURE_32BIT!" CALL SetEnv /x86 > NUL 2>&1
	IF "!TARGET_ARCHITECTURE!" == "!ARCHITECTURE_64BIT!" CALL SetEnv /x64 > NUL 2>&1
)

REM Setup the Visual Studio environment for compiling
IF NOT DEFINED WINDOWS_SDK_SELECTED (
	SET VIUAL_STUDIO_ENVIRONMENT_VARIABLE=VS!VISUAL_STUDIO_INTERNAL_VERSION!COMNTOOLS
	CALL :GETVALUE !VIUAL_STUDIO_ENVIRONMENT_VARIABLE! VISUAL_STUDIO_COMMON_TOOLS_DIRECTORY
	IF !TARGET_ARCHITECTURE! EQU !ARCHITECTURE_32BIT! (
		IF NOT EXIST "!VISUAL_STUDIO_COMMON_TOOLS_DIRECTORY!\vsvars32.bat" (
			ECHO Unable to Setup 32-bit Build Environment: !VISUAL_STUDIO_COMMON_TOOLS_DIRECTORY!\vsvars32.bat is missing
			EXIT /B !EXIT_CODE_MISSING_VISUAL_STUDIO!
		)
		CALL "!VISUAL_STUDIO_COMMON_TOOLS_DIRECTORY!\vsvars32.bat"
	) ELSE (
		IF NOT EXIST "!VISUAL_STUDIO_COMMON_TOOLS_DIRECTORY!\..\..\VC\bin\x86_amd64\vcvarsx86_amd64.bat" (
			ECHO Unable to Setup 64-bit Build Environment: !VISUAL_STUDIO_COMMON_TOOLS_DIRECTORY!\..\..\VC\bin\x86_amd64\vcvarsx86_amd64.bat is missing
			EXIT /B !EXIT_CODE_MISSING_VISUAL_STUDIO!
		)
		CALL "!VISUAL_STUDIO_COMMON_TOOLS_DIRECTORY!\..\..\VC\bin\x86_amd64\vcvarsx86_amd64.bat"
	)
)
CALL :GETFULLPATH "!DEVENV!" DEVENV_FOUND
CALL :GETFULLPATH "!MSBUILD!" MSBUILD_FOUND
CALL :GETFULLPATH "!NMAKE!" NMAKE_FOUND

REM Determine if the build should be cleaned
IF !ENABLE_CLEAN_BUILD! EQU !TRUE! (
	IF EXIST "!ABSOLUTE_BUILD_DIRECTORY!" (
		ECHO | SET /P=Cleaning previous build ... 
		RMDIR /S /Q "!ABSOLUTE_BUILD_DIRECTORY!" > NUL 2>&1
		IF NOT EXIST "!ABSOLUTE_BUILD_DIRECTORY!" (
			ECHO done.
		) ELSE (
			ECHO not fully cleaned ... directory is in use.
		)
	)
)

REM Prepare the build directories
IF NOT EXIST "!ABSOLUTE_BUILD_DIRECTORY!" MKDIR "!ABSOLUTE_BUILD_DIRECTORY!"
IF NOT EXIST "!ABSOLUTE_DEPENDENCIES_DIRECTORY!" MKDIR "!ABSOLUTE_DEPENDENCIES_DIRECTORY!"
IF NOT EXIST "!ABSOLUTE_LOG_DIRECTORY!" MKDIR "!ABSOLUTE_LOG_DIRECTORY!"

REM Move to the dependencies directory
PUSHD "!ABSOLUTE_DEPENDENCIES_DIRECTORY!" > NUL

ECHO.
ECHO Cloning Library Dependencies

REM Clone libuv and checkout the appropiate tag
IF NOT EXIST "!DEPENDENCIES_SOURCE_DIRECTORY!\!LIBUV_DIRECTORY!" (
	ECHO | SET /P=Cloning libuv ... 
	!GIT! clone !LIBUV_REPOSITORY_URL! "!DEPENDENCIES_SOURCE_DIRECTORY!\!LIBUV_DIRECTORY!" > !LOG_LIBUV_BUILD! 2>&1
	IF !ERRORLEVEL! EQU 0 (
		ECHO done.
		PUSHD "!DEPENDENCIES_SOURCE_DIRECTORY!\!LIBUV_DIRECTORY!" > NUL
		ECHO | SET /P=Checking out !LIBUV_BRANCH_TAG_VERSION! ...
		!GIT! checkout !LIBUV_BRANCH_TAG_VERSION! >> !LOG_LIBUV_BUILD! 2>&1
		IF !ERRORLEVEL! EQU 0 (
			ECHO done.
			REM Clone GYP (libuv dependency) to correctly use googlesource URL
			ECHO | SET /P=Cloning gyp ... 
			!GIT! clone !GYP_REPOSITORY_URL! build\gyp >> !LOG_LIBUV_BUILD! 2>&1
			IF !ERRORLEVEL! EQU 0 (
				ECHO done.
			) ELSE (
				ECHO FAILED!
				ECHO 	See !LOG_LIBUV_BUILD! for more details
				EXIT /B !EXIT_CODE_CHECKOUT_FAILED!
			)
		) ELSE (
			ECHO FAILED!
			ECHO 	See !LOG_LIBUV_BUILD! for more details
			EXIT /B !EXIT_CODE_CHECKOUT_FAILED!
		)
		POPD
	) ELSE (
		ECHO FAILED!
		ECHO 	See !LOG_LIBUV_BUILD! for more details
		EXIT /B !EXIT_CODE_CLONE_FAILED!
	)
)

REM Determine is OpenSSL should be cloned
IF !ENABLE_OPENSSL! EQU !TRUE! (
	REM Clone OpenSSL and checkout the appropiate tag
	IF NOT EXIST "!DEPENDENCIES_SOURCE_DIRECTORY!\!OPENSSL_DIRECTORY!" (
		ECHO | SET /P=Cloning OpenSSL ... 
		!GIT! clone !OPENSSL_REPOSITORY_URL! "!DEPENDENCIES_SOURCE_DIRECTORY!\!OPENSSL_DIRECTORY!" > !LOG_OPENSSL_BUILD! 2>&1
		IF !ERRORLEVEL! EQU 0 (
			ECHO done.
			PUSHD "!DEPENDENCIES_SOURCE_DIRECTORY!\!OPENSSL_DIRECTORY!" > NUL
			ECHO | SET /P=Checking out !OPENSSL_BRANCH_TAG_VERSION! ... 
			!GIT! checkout !OPENSSL_BRANCH_TAG_VERSION! >> !LOG_OPENSSL_BUILD! 2>&1
			IF !ERRORLEVEL! EQU 0 (
				ECHO done.
			) ELSE (
				ECHO FAILED!
				ECHO 	See !LOG_OPENSSL_BUILD! for more details
				EXIT /B !EXIT_CODE_CHECKOUT_FAILED!
			)
			POPD
		) ELSE (
			ECHO FAILED!
			ECHO 	See !LOG_OPENSSL_BUILD! for more details
			EXIT /B !EXIT_CODE_CLONE_FAILED!
		)
	)
)

REM Move back to working directory
POPD

ECHO.
ECHO Building Library Dependencies

REM Determine if libuv needs to be built
IF NOT EXIST "!ABSOLUTE_LIBUV_LIBRARY_DIRECTORY!" (
	REM Build libuv dependency
	ECHO Building libuv
	PUSHD "!ABSOLUTE_DEPENDENCIES_DIRECTORY!\!DEPENDENCIES_SOURCE_DIRECTORY!\!LIBUV_DIRECTORY!" > NUL
	IF !TARGET_ARCHITECTURE! EQU !ARCHITECTURE_32BIT! (
		SET LIBUV_TARGET_ARCHITECTURE=x86
		SET LIBUV_VC_TARGET_ARCHITECTURE=Win32
	) ELSE (
		SET LIBUV_TARGET_ARCHITECTURE=x64
		SET LIBUV_VC_TARGET_ARCHITECTURE=x64
	)
	IF "!LIBRARY_TYPE!" == "!LIBRARY_TYPE_SHARED!" (
		SET LIBUV_LIBRARY_TYPE=shared
	) ELSE (
		SET LIBUV_LIBRARY_TYPE=static
	)
	ECHO | SET /P=Configuring libuv ... 
	REM Modify the libuv build script to ensure proper Visual Studio detection
	SET LIBUV_VCBUILD_SCRIPT=vcbuild.bat
	IF NOT DEFINED WINDOWS_SDK_SELECTED (
		SET LIBUV_VCBUILD_SCRIPT=vcbuild-modified.bat
		TYPE vcbuild.bat | FINDSTR /V /C:"if defined WindowsSDKDir goto select-target" | FINDSTR /V /C:"if defined VCINSTALLDIR goto select-target" > !LIBUV_VCBUILD_SCRIPT!
	)
	CALL !LIBUV_VCBUILD_SCRIPT! release nobuild !LIBUV_TARGET_ARCHITECTURE! !LIBUV_LIBRARY_TYPE! >> "!LOG_LIBUV_BUILD!" 2>&1
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See !LOG_LIBUV_BUILD! for more details
		EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
	)
	ECHO done.
	ECHO | SET /P=Building libuv ... 
	!MSBUILD! uv.sln /T:libuv /P:Configuration=Release /P:Platform=!LIBUV_VC_TARGET_ARCHITECTURE! /CLP:NoSummary;NoItemAndPropertyList;Verbosity=minimal /NOLOGO >> !LOG_LIBUV_BUILD! 2>&1
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See !LOG_LIBUV_BUILD! for more details
		EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
	)
	ECHO done.
	ECHO | SET /P=Installing libuv ...
	MKDIR "!ABSOLUTE_LIBUV_LIBRARY_DIRECTORY!\!LIBRARY_INCLUDE_DIRECTORY!"
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See !LOG_LIBUV_BUILD! for more details
		EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
	)
	XCOPY /E /Y include "!ABSOLUTE_LIBUV_LIBRARY_DIRECTORY!\!LIBRARY_INCLUDE_DIRECTORY!" >> !LOG_LIBUV_BUILD! 2>&1
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See !LOG_LIBUV_BUILD! for more details
		EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
	)
	MKDIR "!ABSOLUTE_LIBUV_LIBRARY_DIRECTORY!\!LIBRARY_BINARY_DIRECTORY!"
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See !LOG_LIBUV_BUILD! for more details
		EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
	)
	XCOPY /E /Y Release\lib "!ABSOLUTE_LIBUV_LIBRARY_DIRECTORY!\!LIBRARY_BINARY_DIRECTORY!" >> !LOG_LIBUV_BUILD! 2>&1
	IF NOT !ERRORLEVEL! EQU 0 (
		REM Try again in the other location libuv likes to put files
		XCOPY /Y Release\*.* "!ABSOLUTE_LIBUV_LIBRARY_DIRECTORY!\!LIBRARY_BINARY_DIRECTORY!" >> !LOG_LIBUV_BUILD! 2>&1
		IF NOT !ERRORLEVEL! EQU 0 (
			ECHO FAILED!
			ECHO 	See !LOG_LIBUV_BUILD! for more details
			EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
		)
	)
	ECHO done.
	POPD
)

REM Determine is OpenSSL should be built
IF !ENABLE_OPENSSL! EQU !TRUE! (
	REM Determine if OpenSSL needs to be built
	IF NOT EXIST "!ABSOLUTE_OPENSSL_LIBRARY_DIRECTORY!" (
		REM Build OpenSSL dependency
		ECHO Building OpenSSL
		PUSHD "!ABSOLUTE_DEPENDENCIES_DIRECTORY!\!DEPENDENCIES_SOURCE_DIRECTORY!\!OPENSSL_DIRECTORY!" > NUL
		ECHO | SET /P=Configuring OpenSSL ... 
		IF !TARGET_ARCHITECTURE! EQU !ARCHITECTURE_32BIT! (
			!PERL! Configure VC-WIN32 no-asm --prefix=..\..\!DEPENDENCIES_LIBRARIES_DIRECTORY!\!OPENSSL_DIRECTORY! >> "!LOG_OPENSSL_BUILD!" 2>&1
		) ELSE (
			!PERL! Configure VC-WIN64A --prefix=..\..\!DEPENDENCIES_LIBRARIES_DIRECTORY!\!OPENSSL_DIRECTORY! >> "!LOG_OPENSSL_BUILD!" 2>&1
		)
		IF NOT !ERRORLEVEL! EQU 0 (
			ECHO FAILED!
			ECHO 	See !LOG_OPENSSL_BUILD! for more details
			EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
		)
		ECHO done.
		ECHO | SET /P=Building OpenSSL ... 
		IF !TARGET_ARCHITECTURE! EQU !ARCHITECTURE_32BIT! (
			CALL ms\do_ms.bat >> "!LOG_OPENSSL_BUILD!" 2>&1
		) ELSE (
			CALL ms\do_win64a.bat >> "!LOG_OPENSSL_BUILD!" 2>&1
		)
		!NMAKE! /F ms\ntdll.mak >> "!LOG_OPENSSL_BUILD!" 2>&1
		IF NOT !ERRORLEVEL! EQU 0 (
			ECHO FAILED!
			ECHO 	See !LOG_OPENSSL_BUILD! for more details
			EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
		)
		ECHO done.
		ECHO | SET /P=Installing OpenSSL ... 
		!NMAKE! /F ms\ntdll.mak install >> "!LOG_OPENSSL_BUILD!" 2>&1
		IF NOT !ERRORLEVEL! EQU 0 (
			ECHO FAILED!
			ECHO 	See !LOG_OPENSSL_BUILD! for more details
			EXIT /B !EXIT_CODE_BUILD_DEPENDENCY_FAILED!
		)
		ECHO done.
		POPD
	)
)

ECHO.
ECHO Building Driver

REM Determine if the driver needs to be built
IF NOT EXIST "!ABSOLUTE_DRIVER_LIBRARY_DIRECTORY!" (
	REM Build the driver
	IF NOT EXIST "!ABSOLUTE_BUILD_DIRECTORY!\!DRIVER_DRIVER_DIRECTORY!" MKDIR "!ABSOLUTE_BUILD_DIRECTORY!\!DRIVER_DRIVER_DIRECTORY!"
	PUSHD "!ABSOLUTE_BUILD_DIRECTORY!\!DRIVER_DRIVER_DIRECTORY!" > NUL
	ECHO | SET /P=Configuring driver ... 
	IF NOT DEFINED WINDOWS_SDK_SELECTED (
		SET "DRIVER_CMAKE_COMMAND_LINE=-G ^"Visual Studio !VISUAL_STUDIO_INTERNAL_SHORTHAND_VERSION!"
		IF !TARGET_ARCHITECTURE! EQU !ARCHITECTURE_64BIT! (
			SET "DRIVER_CMAKE_COMMAND_LINE=!DRIVER_CMAKE_COMMAND_LINE! Win64"
			SET VISUAL_STUDIO_PLATFORM_TYPE=x64
		) ELSE (
			SET VISUAL_STUDIO_PLATFORM_TYPE=Win32
		)
	) ELSE (
		SET "DRIVER_CMAKE_COMMAND_LINE=-G "NMake Makefiles"
	)
	SET "DRIVER_CMAKE_COMMAND_LINE=!DRIVER_CMAKE_COMMAND_LINE!^" -DCMAKE_INSTALL_PREFIX=^"!ABSOLUTE_DRIVER_LIBRARY_DIRECTORY!^" -DCMAKE_BUILD_TYPE=!BUILD_TYPE! -DCASS_BUILD_EXAMPLES=OFF -DLIBUV_ROOT_DIR=^"!ABSOLUTE_LIBUV_LIBRARY_DIRECTORY!^""
	IF !ENABLE_OPENSSL! EQU !TRUE! (
		SET "DRIVER_CMAKE_COMMAND_LINE=!DRIVER_CMAKE_COMMAND_LINE! -DCASS_USE_OPENSSL=ON -DOPENSSL_ROOT_DIR=^"!ABSOLUTE_OPENSSL_LIBRARY_DIRECTORY!^""
	) ELSE (
		SET "DRIVER_CMAKE_COMMAND_LINE=!DRIVER_CMAKE_COMMAND_LINE! -DCASS_USE_OPENSSL=OFF"
	)
	IF "!LIBRARY_TYPE!" == "!LIBRARY_TYPE_SHARED!" (
		SET "DRIVER_CMAKE_COMMAND_LINE=!DRIVER_CMAKE_COMMAND_LINE! -DCASS_BUILD_STATIC=OFF"
		SET DRIVER_VISUAL_STUDIO_PROJECT=cassandra
	) ELSE (
		SET "DRIVER_CMAKE_COMMAND_LINE=!DRIVER_CMAKE_COMMAND_LINE! -DCASS_BUILD_STATIC=ON"
		SET DRIVER_VISUAL_STUDIO_PROJECT=cassandra_static
	)
	!CMAKE! !DRIVER_CMAKE_COMMAND_LINE! "!ABSOLUTE_BATCH_DIRECTORY!" > !LOG_DRIVER_BUILD! 2>&1
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See !LOG_DRIVER_BUILD! for more details
		EXIT /B !EXIT_CODE_BUILD_DRIVER_FAILED!
	)
	ECHO done.
	ECHO | SET /P=Building driver ... 
	IF NOT DEFINED WINDOWS_SDK_SELECTED (
		!MSBUILD! cassandra.sln /T:!DRIVER_VISUAL_STUDIO_PROJECT! /P:Configuration=!BUILD_TYPE! /P:Platform=!VISUAL_STUDIO_PLATFORM_TYPE! /CLP:NoSummary;NoItemAndPropertyList;Verbosity=minimal /NOLOGO >> !LOG_DRIVER_BUILD! 2>&1
	) ELSE (
		!NMAKE! /F Makefile >> "!LOG_DRIVER_BUILD!" 2>&1
	)
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See !LOG_DRIVER_BUILD! for more details
		EXIT /B !EXIT_CODE_BUILD_DRIVER_FAILED!
	)
	ECHO done.
	ECHO | SET /P=Installing driver ...
	IF !DEVENV_FOUND! EQU !TRUE! (
		REM Use DevEnv for the installation target as /T:INSTALL is not recognized by MSBUILD
		!DEVENV! cassandra.sln /BUILD "!BUILD_TYPE!|!VISUAL_STUDIO_PLATFORM_TYPE!" /PROJECT INSTALL >> !LOG_DRIVER_BUILD! 2>&1
	) ELSE (
		MKDIR "!ABSOLUTE_DRIVER_LIBRARY_DIRECTORY!\!LIBRARY_INCLUDE_DIRECTORY!"
		XCOPY /E /Y "!ABSOLUTE_BATCH_DIRECTORY!\include" "!ABSOLUTE_DRIVER_LIBRARY_DIRECTORY!\!LIBRARY_INCLUDE_DIRECTORY!" >> !LOG_DRIVER_BUILD! 2>&1
		IF NOT !ERRORLEVEL! EQU 0 (
			ECHO FAILED!
			ECHO 	See !LOG_DRIVER_BUILD! for more details
			EXIT /B !EXIT_CODE_BUILD_DRIVER_FAILED!
		)
		MKDIR "!ABSOLUTE_DRIVER_LIBRARY_DIRECTORY!\!LIBRARY_BINARY_DIRECTORY!"
		IF NOT DEFINED WINDOWS_SDK_FOUND (
			XCOPY /Y !BUILD_TYPE!\*.lib "!ABSOLUTE_DRIVER_LIBRARY_DIRECTORY!\!LIBRARY_BINARY_DIRECTORY!" >> !LOG_DRIVER_BUILD! 2>&1
		) ELSE (
			XCOPY /Y *.lib "!ABSOLUTE_DRIVER_LIBRARY_DIRECTORY!\!LIBRARY_BINARY_DIRECTORY!" >> !LOG_DRIVER_BUILD! 2>&1
		)
		IF NOT !ERRORLEVEL! EQU 0 (
			ECHO FAILED!
			ECHO 	See !LOG_DRIVER_BUILD! for more details
			EXIT /B !EXIT_CODE_BUILD_DRIVER_FAILED!
		)
		IF "!LIBRARY_TYPE!" == "!LIBRARY_TYPE_SHARED!" (
			MKDIR "!ABSOLUTE_DRIVER_LIBRARY_DIRECTORY!\!LIBRARY_RUNTIME_DIRECTORY!"
			IF NOT DEFINED WINDOWS_SDK_FOUND (
				XCOPY /Y !BUILD_TYPE!\*.dll "!ABSOLUTE_DRIVER_LIBRARY_DIRECTORY!\!LIBRARY_RUNTIME_DIRECTORY!" >> !LOG_DRIVER_BUILD! 2>&1
			) ELSE (
				XCOPY /Y *.dll "!ABSOLUTE_DRIVER_LIBRARY_DIRECTORY!\!LIBRARY_RUNTIME_DIRECTORY!" >> !LOG_DRIVER_BUILD! 2>&1
			)
		)
	)
	IF NOT !ERRORLEVEL! EQU 0 (
		ECHO FAILED!
		ECHO 	See !LOG_DRIVER_BUILD! for more details
		EXIT /B !EXIT_CODE_BUILD_DRIVER_FAILED!
	)
	ECHO done.
	POPD
)

REM Display success message with location to built driver library
ECHO.
ECHO Driver has been successfully built [!TARGET_ARCHITECTURE!-bit !BUILD_TYPE!]
ECHO 	!ABSOLUTE_DRIVER_LIBRARY_DIRECTORY!

REM Disable delayed expansion
ENDLOCAL

REM Exit the batch operation (Ensures below functions are skipped)
EXIT /B

REM Convert a string to uppercase
REM
REM @param string String to convert to uppercase
REM @param return Uppercase converted string
:UPPERCASE [string] [return]
	SET "UPPERCASE_ALPHABET=A B C D E F G H I J K L M N O P Q R S T U V W X Y Z"
	SET RETURN=%~1
	FOR %%A IN (!UPPERCASE_ALPHABET!) DO SET RETURN=!RETURN:%%A=%%A!
	SET %2=!RETURN!
	GOTO:EOF

REM Display the help message and exit with error code
:DISPLAYHELP
	CALL :UPPERCASE !BATCH_FILENAME! BATCH_FILENAME_UPPERCASE
	ECHO Usage: !BATCH_FILENAME_UPPERCASE! [OPTION...]
	ECHO.
	ECHO 	!ARGUMENT_BUILD_TYPE_DEBUG!			Enable debug build
	ECHO 	!ARGUMENT_BUILD_TYPE_RELEASE!		Enable release build ^(default^)
	ECHO 	!ARGUMENT_DISABLE_CLEAN_BUILD!		Disable clean build
	ECHO 	!ARGUMENT_DISABLE_OPENSSL!	Disable OpenSSL support
	ECHO 	!ARGUMENT_LIBRARY_TYPE_SHARED!		Build shared library ^(default^)
	ECHO 	!ARGUMENT_LIBRARY_TYPE_STATIC!		Build static library
	IF !SYSTEM_ARCHITECTURE! EQU !ARCHITECTURE_32BIT! (
		ECHO 	!ARGUMENT_TARGET_ARCHITECTURE_32BIT!			Target 32-bit build ^(default^)
		ECHO 	!ARGUMENT_TARGET_ARCHITECTURE_64BIT!			Target 64-bit build
	) ELSE (
		ECHO 	!ARGUMENT_TARGET_ARCHITECTURE_32BIT!			Target 32-bit build
		ECHO 	!ARGUMENT_TARGET_ARCHITECTURE_64BIT!			Target 64-bit build ^(default^)
	)
	ECHO.
	ECHO 	!ARGUMENT_HELP!			Display this message
	EXIT /B

REM Get an element from an array
REM
REM @param array Global array to iterate through
REM @param index Index to retrieve
REM @param return Variable to assign retieved value
:GETARRAYELEMENT [array] [index] [return]
	FOR /F "TOKENS=%~2" %%A IN ("!%~1!") DO SET %~3=%%A
	EXIT /B

REM Get a value from a key=value pair in an environment variable
REM
REM @param pair Key/Value pair to parse
REM @param return Value parsed from key/value pair
:GETVALUE [pair] [return]
	FOR /F "TOKENS=1,2* DELIMS==" %%A IN ('SET %~1') DO SET %~2=%%B
	EXIT /B

REM Get full path for a given executable in the system PATH
REM
REM @param executable Exectuable to search for in PATH
REM @param return Full path with executable
:GETFULLPATH [executable] [return]
	FOR %%A IN ("%~1") DO SET %~2=%%~$PATH:A
	EXIT /B

REM Compare two version numbers
REM
REM @param version-one Version to compare against another version number
REM @param version-two Version to compare against another version number
REM @return 1 if version-one > version-two
REM         0 if version-one == version-two
REM         -1 if version-one < version-two
:COMPAREVERSION [version-one] [version-two]
	CALL :GETVERSIONINFORMATION %~1 VERSION_ONE_MAJOR VERSION_ONE_MINOR VERSION_ONE_PATCH
	CALL :GETVERSIONINFORMATION %~2 VERSION_TWO_MAJOR VERSION_TWO_MINOR VERSION_TWO_PATCH
	IF !VERSION_ONE_MAJOR! GTR !VERSION_TWO_MAJOR! EXIT /B 1
	IF !VERSION_ONE_MAJOR! LSS !VERSION_TWO_MAJOR! EXIT /B -1
	IF NOT DEFINED VERSION_ONE_MINOR IF NOT DEFINED VERSION_TWO_MINOR EXIT /B 0
	IF !VERSION_ONE_MINOR! GTR !VERSION_TWO_MINOR! EXIT /B 1
	IF !VERSION_ONE_MINOR! LSS !VERSION_TWO_MINOR! EXIT /B -1
	IF NOT DEFINED VERSION_ONE_PATCH IF NOT DEFINED VERSION_TWO_PATCH EXIT /B 0
	IF !VERSION_ONE_PATCH! GTR !VERSION_TWO_PATCH! EXIT /B 1
	IF !VERSION_ONE_PATCH! LSS !VERSION_TWO_PATCH! EXIT /B -1
	EXIT /B 0

REM Get version breakdown [major.minor.patch]
REM
REM @param version String representing the full version
REM @param return-major Major version number parsed from version
REM @param return-minor Minor version number parsed from version
REM @param return-patch Patch version number parsed from version
:GETVERSIONINFORMATION [version] [return-major] [return-minor] [return-patch]
	FOR /F "TOKENS=1,2,3* DELIMS=." %%A IN ("%~1") DO (
		SET %~2=%%A
		SET %~3=%%B
		SET %~4=%%C
	)
	EXIT /B
