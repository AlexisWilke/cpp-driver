                   CASSANDRA CPP DRIVER UNDER MAC OS X
                      NOTES ON BUILDING AND RUNNING

(tested on Mac OS X 10.8.4 with 2.9 GHz Intel Core i5)


0. Cassandra and CCM

The easiest way to get Cassandra up and running on Mac is to install CCM (Cassandra 
Cluster Manager). CCM will download Cassandra, so we get one less thing to 
worry about.

The easiest way to get CCM for Mac is to install it via MacPorts:

    sudo port -v sync && sudo port -v install ccm

(In case you don't have MacPorts, install it by following the instructions at 
http://www.macports.org/install.php)

Remeber to set up loopback aliases if you want to spawn more than one Cassandra node:
 
    sudo ifconfig lo0 alias 127.0.0.2 up
    sudo ifconfig lo0 alias 127.0.0.3 up
    sudo ifconfig lo0 alias 127.0.0.4 up
    ...

At this stage CCM should work fine.

-------------------------------------------------------------------------------

1. The toolchain

The following procedure aims at setting up Clang toolchain to build our cpp-driver,
with Xcode as the preferred IDE.

a. Update the Xcode to the recent version (5.0 at the time of this writing)
b. Launch Xcode and go to Preferences->Downloads. Download and install the latest
 command line tools.

Now you need to get the Boost libraries. There is one caveat, though: Boost
packaged by Homebrew is linked by default against GNU libstdc++. We suggest to 
stick to the libc++ throughout the further development and not to mix both standard
libraries. We therefore need to build the Boost with Clang and link it with libc++.
This is easiest done by:

brew update
brew install boost --with-c++11

(Yes, Homebrew will complain about Macports and Homebrew being used at the same time.
Unfortunately, Homebrew does not have a CCM package, so we had to use MacPorts there.)

In the same spirit you can install libopenssl, which is also required by the project:

    brew install openssl

-------------------------------------------------------------------------------

2. LibCDS (tested on ver. 1.4.0)

Apparently, libcds does not have a predefined build configuration for Mac OS X.
We have to apply minor modifications to use the 'Linux' target here.

For the impatient: you can find the modified sources in the cpp-driver/ext directory.
Please, just unpack them and run the build/build-iMac.sh script.

Otherwise, first download the original sources of libcds and go to 'build' directory
therein. Edit the 'build.sh' script. We need to change a few things there:

- In the section 'Determine OS family', add target 'darwin' to the family of 
'linux|sunos|hpux|aix|...' (so that you have 'darwin|linux|sunos|hpux|aix|...').
Otherwise the script will halt here with complain about "Unknown operation system".

- In the section 'Determine compiler flags' we added 'darwin' as possible OS_FAMILY.

   x86)
       case $OS_FAMILY in
          linux|freebsd|darwin)
              buildCXXflags="-m64 -fPIC -march=$ArchFlag"
              buildCflags="-m64 -fPIC -march=$ArchFlag"
              buildLDflags="-m64 -fPIC"
              buildTestLDflags="-m64 -fPIC"
          ;;

After editing the build script, go to the cds/compiler/clang/defs.h file. All 
you have to do there is to direct the preprocessor onto the "Linux path". We simply

...changed this line:
#if defined( __linux__ )
to this:
#if defined( __linux__ ) || defined(__APPLE__)

However, the interfaces for getting high resolution time apparently differ in Linux
and in OS X. To fix this, go to cds/os/linux/timer.h and add the following lines among other #includes:

#ifdef __APPLE__
  #include <mach/clock.h>
  #include <mach/mach.h>
#endif

Then go to the static method Timer::current(native_timer_type&) and modify its body
as follows:

static void current( native_timer_type& tmr )
{
#ifdef __APPLE__
    clock_serv_t cclock;
    mach_timespec_t mts;
    host_get_clock_service(mach_host_self(), CALENDAR_CLOCK, &cclock);
    clock_get_time(cclock, &mts);
    mach_port_deallocate(mach_task_self(), cclock);
    tmr.tv_sec = mts.tv_sec;
    tmr.tv_nsec = mts.tv_nsec;
#elce
    clock_gettime(CLOCK_REALTIME, &tmr);
#endif
}

Now cd to the build/ directory and try to build the project with the following command:

./build.sh --with-make make --with-boost /usr/local/include -c clang -x clang++ \
           -z '-std=c++11 -stdlib=libc++ -Wall -pedantic' \
           -l "-L/usr/local/lib -stdlib=libc++" 2>&1 | tee build.log

(Please mind the library paths; in your environment they may differ.)

If it fails at linking, you may need to edit the Makefile. In our cases it was necessary
to add the '-mt' suffix to boost libs listed there. We also removed '-lrt' from linker
input and added '-lboost_system-mt'.

After building the libcds.so.x.y.z and libcds-debug.so.x.y.z, copy them to the 
libpath in your system and create the appropriate aliases there, e.g. 
'libcds.dylib' and 'libcds-debug.dylib'. You can also run the tests before deployment.
(find the test app in bin/gcc-platform-darwin-0/test-hdr)

-------------------------------------------------------------------------------

3. Building the cpp driver

This one is relatively straightforward. Once you have all the libraries installed, just run
the CMake in 'cpp-driver's root folder:

cmake -G "Xcode"

In our case CMake was unable to find the cds header files; most likely
you will encounter the same issue. In such case you can edit CMakeCache.txt and manually
set LIBCDS_INCLUDE_DIRS to point the *root directory* of CDS. Alternatively, you
can think of copying the cds headers to appropriate system-wide locations.

-------------------------------------------------------------------------------
